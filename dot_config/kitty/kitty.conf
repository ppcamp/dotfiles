# vim:fileencoding=utf-8:foldmethod=marker

# NOTE: that ctrl+shift+f2 open this file
# Shortcuts: https://gist.github.com/AskinNet/0d0d4f7f0ee221f8362af9d9876d021a

# | ctrl+shift+e | open url |
# | ctrl+shift+p>f | copy all possible files in current directory |
# | ctrl+shift+u | add unicode char |
# | ctrl+shift+f1 | show help |
# | f1 + mark | to add markers to some text in screen |
# | ctrl+shift+f6 | debug |

# https://sw.kovidgoyal.net/kitty/conf/#keyboard-shortcuts

# Add themes
# include ./theme.conf

# BEGIN_KITTY_THEME
# Ros√© Pine
include current-theme.conf
# END_KITTY_THEME

font_family JetBrainsMono Nerd Font
font_size 12.0
bold_font auto
italic_font auto

# tab_title_template {layout_name}{title}
# Set a huge scrollback buffer lines (The buffer after clear, e.g.,  100000)
# ctrl+shift+delete clear the pagecmd output
scrollback_lines 100000

# Enable hardware acceleration for faster rendering
#use_freetype_in_rendering yes

# Hide the tab bar by default (optional)
#hide_tab_bar false

tab_bar_style powerline
# or separator

### tab shorcuts
map alt+1 goto_tab 1
map alt+2 goto_tab 2
map alt+3 goto_tab 3
map alt+4 goto_tab 4
map alt+5 goto_tab 5
map alt+6 goto_tab 6
map alt+7 goto_tab 7
map alt+8 goto_tab 8
map alt+9 goto_tab 9

map ctrl+shift+t new_tab_with_cwd
map alt+shift+kp_add new_tab_with_cwd
# Program to be used when hitting ctrl+shift+h (search history buffer screen)
#scrollback_pager nvim -c 'setlocal ft=man nonumber nolist showtabline=0 foldcolumn=0' -c "autocmd VimEnter * normal G" -

# Default layout to use
enabled_layouts splits
# file:///usr/share/doc/kitty/html/keyboard-protocol.html
# Rotate the current split, changing its split axis from vertical to
# horizontal or vice versa
map ctrl+alt+r layout_action rotate
map alt+shift+kp_delete layout_action rotate
map alt+shift+kp_separator layout_action rotate
# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other. alt+shift -
map alt+shift+minus launch --location=hsplit --cwd=current
map alt+shift+kp_subtract launch --location=hsplit --cwd=current
# alt+shift +
map alt+shift+equal launch --location=vsplit --cwd=current
map alt+shift+kp_divide launch --location=vsplit --cwd=current
# auto
map ctrl+shift+enter launch --location=split --cwd=current
map ctrl+shift+' launch --location=split --cwd=current
map alt+shift+kp_multiply launch --location=split --cwd=current

# alias to ctrl+shift+escape
map ctrl+shift+F3 kitty_shell window

# Set the bias of the split containing the currently focused window. The
# currently focused window will take up the specified percent of its parent
# window's size.
map ctrl+alt+enter layout_action bias 80 100 120 40
map alt+shift+kp_enter ctrl+alt+enter

# Move the active window in the indicated direction
map ctrl+shift+kp_up move_window up
map ctrl+shift+kp_left move_window left
map ctrl+shift+kp_right move_window right
map ctrl+shift+kp_down move_window down
# compatibility
map ctrl+shift+kp_8 move_window up
map ctrl+shift+kp_4 move_window left
map ctrl+shift+kp_6 move_window right
map ctrl+shift+kp_2 move_window down

# Switch focus to the neighboring window in the indicated direction
map alt+kp_left neighboring_window left
map alt+kp_right neighboring_window right
map alt+kp_up neighboring_window up
map alt+kp_down neighboring_window down
# compatibility
map alt+kp_4 neighboring_window left
map alt+kp_6 neighboring_window right
map alt+kp_8 neighboring_window up
map alt+kp_2 neighboring_window down

# Move the active window to the indicated screen edge
#map ctrl+shift+up layout_action move_to_screen_edge top
#map ctrl+shift+left layout_action move_to_screen_edge left
#map ctrl+shift+right layout_action move_to_screen_edge right
#map ctrl+shift+down layout_action move_to_screen_edge bottom
