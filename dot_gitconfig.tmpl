[user]
name = {{ .git.name }}
email = {{ .git.email }}

{{- if .git.sign }}
signingkey = {{ .git.sign }}
{{- end }}

[commit]
template = ~/.git-template
{{- if .git.sign }}
gpgsign = true

{{-     if .git.ssh }}
[gpg]
format = ssh

[gpg "ssh"]
allowedSignersFile = ~/.ssh/allowed_signers
{{-     end }}
{{- end }}

[safe]
directory = /usr/share/nvim

[url "git@bitbucket.org:"]
insteadOf = https://bitbucket.org/

[push]
autoSetupRemote = true

[credential]
helper = store

[init]
defaultBranch = main

[core]
editor = nvim #code --wait
pager = less -IR -

[diff]
# diffstatic is just a post-processor visualizer for unified diffs
# (generated by git, or by the `diff` gnu command). Thus, when you
# change the diff command, the output won't be valid diff, instead
# it'll be a visual repr of the diff, therefore, an invalid patch.
#
# To avoid such problems, prefer to use git aliases, or difftool.
tool = difft # code
#external = difft # DO NOT CHANGE THIS, otherwise, you won't be able to generate valid patch files

[difftool]
prompt = false

[difftool "difft"]
cmd = difft --tab-width 2 --context 0 --display side-by-side "$LOCAL" "$REMOTE"

[difftool "vscode"]
cmd = code --wait --diff $LOCAL $REMOTE

[pager]
# Use a pager if the difftool output is larger than one screenful,
# consistent with the behaviour of `git diff`.
difftool = true

[merge]
ff = false
tool = vscode

[mergetool "vscode"]
cmd = code --wait $MERGED

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[rebase]
autoStash = true
autoSquash = true

[alias]
# remember that any external command must be found placed at /bin/ or /usr/bin
# gitx: plugin needs to be installed in the /usr/bin (you can find it in "shell" repo)
a = add
aa = add -A
ap = add --patch
alias = config --get-regexp alias
authors = shortlog --summary --email --numbered --no-merges
authorsx = !gitx --run authors # (all authors that commited) example: <git authors>
b = branch
bm = branch --merged
bed = branch --edit-description
bsd = branch --show-description
c = commit
ca = commit --amend
caf = commit --amend --no-edit
ci = commit --interactive
cm = commit -m
cleanf = clean -df                           # (clean untracked files) example: <git reset-clean>
conflicts = diff --name-only --diff-filter=U # (show conflicts) example: <git conflicts>
cp = cherry-pick                             # cherry pick a commit, example: <git cp ..branchName> or <git cp commitHash>
cpn = cherry-pick -n                         # cherry pick , but no commit
curr = branch --show-current                 # (current branch) example: <git curr>
del = !gitx --run delete                     # example: <git delete>
del-remote = !gitx --run delete -r           # (delete a given branch in remote) example: <git delete-remote branchName>
d = diff --word-diff --find-copies --find-renames --color
ds = d --staged
dt = difftool --word-diff
dts = dt --staged
exist-remote = ls-remote --heads origin # (check if exist in remote) example: <git exist-remote branchName>
f = fetch --prune
gcf = gc --agressive # optimize the repository, (also use git f) example: <git optmize> (see git gc)
gg = grep --break --heading --line-number --color
graph = ls --graph # example: <git graph develop feature/some-14> or just <git graph>
graphx = graph --abbrev-commit --all
hard = reset --hard
hist = !gitx --run hashes                                                                                                                              # (it requires to have installed the gitx plugin)
health = fsck                                                                                                                                          # (check the health of the repository) example: <git health>
lazy = !LANG=en_US.UTF-8 lazygit                                                                                                                       # (execute lazygit cmd)
list = branch -v                                                                                                                                       # (list local branches) example: <git list>
list-remotes = branch --remotes                                                                                                                        # (list remote branches ref) example: <git list-remotes>
ll = ls --name-only                                                                                                                                    # alternative to <git log>, example: <git ls>
local-branches = !git branch -v | cut -c 3- | awk '{ print $2\" \"$1 }'                                                                                # (show local only branches) example: <git local-branches>
log-deleted = log --diff-filter=D --                                                                                                                   # (show logged files, alternativaly, you can pass a directory to search for) example: <git log-deleted>
ls = log --format=format:'%C(bold yellow)%h%C(reset) %C(reset)%s%C(bold blue)%d%C(reset) %C(dim white)%an [%G?] (%ad, %ar)%C(reset)' --decorate --date=short # alternative to <git log>, example: <git ls>
lsp = ls --first-parent
new = switch --create                                                                                                                                      # (create new branches) example: <git new branchName>
p = pull
pr = pull --rebase
patch = !git add -N . && git diff HEAD
pushf = push --force --progress                            # (force push) example: <git pushf>
recent-branches = !git branch --sort=-committerdate | head # (show recent branches) example: <git recent-branches>
rename = branch -m                                         # (rename branch locally, remember to <git push origin branch> + <git delete-remote>) example: <git rename newName>
rename-remote = "!fn() { git branch -m \"$1\" \"$2\" && git push origin \"$2\" && git push origin --delete \"$1\" && git push --set-upstream origin \"$2\"; }; fn"
reset-all = !git reset-untracked && git reset-hard # (clean all- (un)tracked files) example: <git reset-all>
reset-hard = reset --hard HEAD                     # (clean tracked files) example: <git reset-hard>
s = status
soft = reset --soft
stashes = !gitx --run stashes # (it requires to have installed the gitx plugin)
sw = switch                   # (it requires to have installed the gitx plugin)
swx = !gitx --run branches    # (it requires to have installed the gitx plugin)
sync = !git f && git p        # (fetch and pull) example: <git sync>
tags = !gitx --run tags       # (it requires to have installed the gitx plugin)
unmodule = submodule deinit -f
unstage = restore --staged
unstage-all = unstage -S .
what = whatchanged
wip = !git add -A && git commit -m 'WIP' # Work In Progress commit
wipb = switch --create wip # Work In Progress commit
worktrees = !gitx --run worktrees        # (it requires to have installed the gitx plugin)
