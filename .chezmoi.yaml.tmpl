{{- /*

This file is render before everything, thus, you can't reference the
`.chezmoidata.yaml` file.

ALL CUSTOMS VARIABLES MUST BE HERE. You CANNOT USE PROMPTS INSIDE TEMPLATES
DIRECTLY.

See:
- https://www.chezmoi.io/reference/templates/variables/
- https://www.chezmoi.io/user-guide/command-overview/

*/ -}}

{{- /* Checks if running interactively, which is not the case for GitHub Codespaces */ -}}
{{- $interactive := stdinIsATTY -}}

{{- /* Initializes the name variable with a default value */ -}}
{{- /* If name was previously set, reuses it */ -}}
{{- /* Otherwise, if running interactively, prompts for a name */ -}}

{{- $name := "Pedro Campos" -}}
{{- if hasKey . "name" -}}
{{-   $name = .name -}}
{{- else if $interactive -}}
{{-   $name = promptString "Ó´Ω git name" $name -}}
{{- end -}}


{{- /* Does the same for the email */ -}}
{{- $email := "p.augustocampos@gmail.com" -}}
{{- if hasKey . "email" -}}
{{-   $email = .email -}}
{{- else if $interactive -}}
{{-   $email = promptString "Ó´Ω git email" $email -}}
{{- end -}}

{{- /* Check if shuold sign commits */ -}}
{{- $shouldSign := true -}}
{{- if $interactive -}}
{{-   $shouldSign = promptBool "Ó´Ω Sign git commits (shows a 'verified' badge)" $shouldSign -}}
{{- end -}}

{{- $gitsign := "" -}}
{{- $useSignGPG := true -}}

{{- if $shouldSign -}}
{{-   $useSignGPG := promptBool "Ó´Ω Use gpg" $useSignGPG -}}
{{-   if $useSignGPG -}}
{{      $gitsign = "346B64E789921A3F" -}}
{{-     writeToStdout "\033[33müõ†Ô∏è Warn:\033[0m It requires gnupg to be installed and running\n" }}
{{-     writeToStdout "üîè Enabling signed commits\n" }}
{{-     writeToStdout "\033[32müí° Tip:\033[0m you can generate keys by typing:\n" }}
{{-     writeToStdout "\tgpg --full-generate-key\n" }}
{{-     writeToStdout "\033[32müí° Tip:\033[0m you can check the generated keys by typing:\n" }}
{{-     writeToStdout "\tgpg --list-secret-keys --keyid-format LONG\n" }}
{{-     writeToStdout "\tgpg --list-secret-keys --keyid-format LONG | grep '^sec' | awk '{print $2}' | cut -d'/' -f2 \n\n" }}

{{-     $gitsign = promptString "üîè GPG key to enable" $gitsign }}

{{-     writeToStdout "\033[32müí° Tip:\033[0m After this, you just need to copy and register into the platform (Bitbucket/Github):\n" }}
{{-     writeToStdout "\tgpg --armor --export " $gitsign "\n" }}
{{-     writeToStdout "\033[32müí° Tip:\033[0m You can check it by typing\n" }}
{{-     writeToStdout "\tgit log --show-signature\n\n" }}
{{-   else -}}
{{      $gitsign = joinPath .chezmoi.homeDir ".ssh" "git.pub" -}}
{{-     writeToStdout "üîè Enabling signed commits with SSH key\n" }}
{{-     writeToStdout "\033[32müí° Tip:\033[0m You can use SSH keys to sign commits, see: https://git-scm.com/docs/gpg-signing-key\n\n" }}
{{-     writeToStdout "\033[32müí° Tip:\033[0m you can generate keys by typing:\n" }}
{{-     writeToStdout "\tssh-keygen -t ed25519 -C \"p.augustocampos@gmail.com\" -f ~/.ssh/git\n\n" }}
{{-     $gitsign = promptString "üîè SSH key to enable" $gitsign }}
{{-   end -}}
{{- else -}}
{{-   writeToStdout "üîè Disabling signed commits\n" }}
{{- end }}


{{- /* Installation scripts selection */ -}}
{{- $allChoices := list
  "asdf"
  "bat"
  "bsdtar"
  "btop"
  "choose"
  "debug-tools"
  "diffstatic"
  "eza"
  "fd"
  "flatpak"
  "flatpak-fix-dark-theme"
  "fzf"
  "gitx"
  "gum"
  "hyperfine"
  "just"
  "kitty"
  "lazygit"
  "nvim"
  "perm"
  "pet"
  "python-tools"
  "podman"
  "procs"
  "rg"
  "sd"
  "shfmt"
  "sqlfluff"
  "starship"
  "tlrc"
  "xcp"
  "xpb"
  "zoxide"
  "zsh"
-}}
{{- $defaultChoices := list
  "asdf"
  "bat"
  "bsdtar"
  "btop"
  "choose"
  "diffstatic"
  "eza"
  "fd"
  "fzf"
  "gitx"
  "kitty"
  "lazygit"
  "nvim"
  "perm"
  "pet"
  "procs"
  "python-tools"
  "rg"
  "sd"
  "shfmt"
  "sqlfluff"
  "starship"
  "tlrc"
  "xcp"
  "xpb"
  "zoxide"
  "zsh"
-}}
{{- $choices := promptMultichoice "Û∞ØÇ What should install (scripts to run)" $allChoices $defaultChoices -}}
{{- /* toRun: {{ $choices | toYaml | nindent 4 }} */ -}}

{{- if $interactive -}}
{{-   writeToStdout "\033[32müí° Tip:\033[0m You can re-enter your name and email with `chezmoi init --data=false`.\n\n" -}}
{{- end -}}

{{- writeToStdout "\033[33müõ†Ô∏è Warn:\033[0m To gitconfig to work properly, you need to have git 3.37+.\n" }}
{{- writeToStdout "\tUse ppa or build from src, if necessary.\n" }}

{{- if eq .chezmoi.os "darwin" -}}
{{- /*    üçé macOS-specific code */ -}}
{{ else if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{- /*    ü™ü WSL-specific code */ -}}
{{   else if eq .chezmoi.osRelease.id "debian" }}
{{- /*    üå± Debian-specific code */ -}}
{{   else if eq .chezmoi.osRelease.id "fedora" }}
{{- /*    üé© Fedora-specific code */ -}}
{{   else if eq .chezmoi.osRelease.id "fedora" }}
{{- /*    üêß ubuntu-specific code */ -}}
{{-  end -}}
{{- end -}}

sourceDir: {{ .chezmoi.sourceDir | quote }}

# diff command to use, by default chezmoi uses `diff`. Vimdiff requires `vim` to be installed.
# diff:
#  command: "vimdiff"

{{- $debianBased := list "debian" "ubuntu" "pop-os" "kubuntu" }}
{{- /* rpmBased = list "fedora" "opensuse" */ -}}
{{- $osName := .chezmoi.osRelease.id | lower }}

# Note that it doesn't support ARCH linux
data:
  configs:
    os: {{ if has $osName $debianBased }} deb {{ else }} dnf {{ end }}
    disable:
      zsh: false

  installDirs:
    main: /usr/local/bin
    home: {{ joinPath .chezmoi.homeDir ".local" "bin" }}

  git:
    name: {{ $name | quote }}
    email: {{ $email | quote }}
    sign: {{ $gitsign | quote }}
    ssh: {{ not $useSignGPG }}

  scripts:
    {{ range $choices -}}
    {{.}}: true
    {{ end }}

