[user]
    name = Pedro Santos
    email = pedro.santos@emailprovider.com
    
[commit]
    template = ~/.git-template

[safe]
	directory = /usr/share/nvim

[url "git@bitbucket.org:"]
	insteadOf = https://bitbucket.org/

[push]
	autoSetupRemote = true

[credential]
    helper = store

[init]
    defaultBranch = main

[core]
    editor = nvim #code --wait
    pager = less -IR -

[diff]
    # diffstatic is just a post-processor visualizer for unified diffs
    # (generated by git, or by the `diff` gnu command). Thus, when you
    # change the diff command, the output won't be valid diff, instead
    # it'll be a visual repr of the diff, therefore, an invalid patch.
    #
    # To avoid such problems, prefer to use git aliases, or difftool.
    tool = difft # code
    #external = difft # DO NOT CHANGE THIS, otherwise, you won't be able to generate valid patch files

[difftool]
    prompt = false

[difftool "difft"]
    cmd = difft "$LOCAL" "$REMOTE"

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[pager]
    # Use a pager if the difftool output is larger than one screenful,
    # consistent with the behaviour of `git diff`.
    difftool = true

[merge]
    tool = vscode

[mergetool "vscode"]
    cmd = code --wait $MERGED

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[commit]
    template = ~/.git-template

[push]
    autoSetupRemote = true

[rebase]
    autoStash = true
    autoSquash = true

[alias]
    # remember that any external command must be found placed at /bin/ or /usr/bin
    # TODO: replace all references to fzf-git-* plugin, to the actual code, since I cannot call it from here
    alias = config --get-regexp alias
    authors = !git log --format='%aN <%aE>' | grep -v 'users.noreply.github.com' | sort -u --ignore-case # (all authors that commited) example: <git authors>
    c = commit
    ca = commit --amend
    cmsg = commit -m
    conflicts = diff --name-only --diff-filter=U # (show conflicts) example: <git conflicts>
    #curr = rev-parse --abbrev-ref HEAD # (current branch) example: <git curr>
    current = branch --show-current # (current branch) example: <git curr>
    delete = !git branch --list | fzf --border-label-pos=2 --border-label=" ðŸŒ² Delete branch " | xargs git branch --delete # example: <git delete>
    delete-remote = git push origin --delete # (delete a given branch in remote) example: <git delete-remote branchName>
    d = difftool
    dift = difftool
    exist-remote = ls-remote --heads origin # (check if exist in remote) example: <git exist-remote branchName>
    f = fetch --prune
    graph = log --graph --oneline --decorate # example: <git graph develop feature/some-14> or just <git graph>
    graphx = log --graph --abbrev-commit --decorate --format=format:'%C(bold yellow)%h%C(reset) %C(reset)%s %C(dim white)%an (%ar)%C(reset)' --all
    graph-vs = !git graph $(git curr) # (git graph vs current) example: <git graph-vs SomeBranchName>
    history = !git log --oneline --color | fzf --border-label-pos=2 --border-label=" ðŸ§» History " --ansi --preview 'git show --color=always $(echo {} | cut -d\" \" -f1)' | cut -d\" \" -f1 | xargs -I {} git diff {}
    lazy = !LANG=en_US.UTF-8 lazygit # (execute lazygit cmd)
    list = branch -v # (list local branches) example: <git list>
    list-remotes = branch --remotes # (list remote branches ref) example: <git list-remotes>
    ll = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]" --name-only --decorate --date=short # alternative to <git log>, example: <git ls>
    local-branches = !git branch -v | cut -c 3- | awk '{ print $2\" \"$1 }' # (show local only branches) example: <git local-branches>
    log-deleted = log --diff-filter=D -- # (show logged files, alternativaly, you can pass a directory to search for) example: <git log-deleted>
    ls = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]" --decorate --date=short # alternative to <git log>, example: <git ls>
    new = checkout -B # (create new branches) example: <git new branchName>
    p = pull
    patch = !git add -N . && git diff HEAD > patch
    pushf = push --force --progress # (force push) example: <git pushf>
    recent-branches = !git branch --sort=-committerdate | head # (show recent branches) example: <git recent-branches>
    # git branch -m <branch=new-branch-name>; git push origin <branch>; git push origin --delete <current=$(git curr)>
    rename = branch -m # (rename branch locally, remember to <git push origin branch> + <git delete-remote>) example: <git rename newName>
    reset-all = !git reset-untracked && git reset-hard # (clean all- (un)tracked files) example: <git reset-all>
    reset-hard = reset --hard HEAD # (clean tracked files) example: <git reset-hard>
    reset-untracked = clean -df # (clean untracked files) example: <git reset-clean>
    s = status
    stashes = !fzf-git --run stashes # (it requires to have installed the fzf-git plugin)
    sw = !git switch $(git branch | fzf --border-label-pos=2 --border-label=' ðŸŒ² Branches ' --preview='git log --oneline --graph --color=always {}' --border=rounded)
    swx = !fzf-git --run branches # (it requires to have installed the fzf-git plugin)
    sync = !git f && git p # (fetch and pull) example: <git sync>
    tags = !fzf-git --run tags # (it requires to have installed the fzf-git plugin)
    unmodule = submodule deinit -f
    unstage = restore --staged
    unstage-all = unstage -S .
    wip = !git add -A && git commit -m 'WIP' # Work In Progress commit
    worktrees = !fzf-git --run worktrees # (it requires to have installed the fzf-git plugin)